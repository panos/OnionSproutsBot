#!/usr/bin/env python3

# Dependencies:
#  pip3 install PyGithub
#  pip3 install python-gitlab

# Before running, place the authentication token for a user with push access to
# the Github repository in an environment variable 'GITHUB_AUTH' and a token to
# access the GitLab repository in an environment variable 'GITLAB_AUTH'

from github import Github
from gitlab import Gitlab

import sys
import json
import urllib
import subprocess
import os
import base64

REPO_NAME = "torproject/torbrowser-releases"

failure = False

failed_uploads = []

version = None
data = None

class GitlabRemote:
    def __init__(self, token):
        self.gl = Gitlab("https://gitlab.com", private_token=token)

    def delete_old_projects(self):
        projects = self.gl.projects.list(owned=True)
        for project in projects:
            project.delete()

    def create_projects(self):
        # Create one project for each platform
        windows_repo = self.gl.projects.create({'name': 'torbrowser-'+version+'-windows',
            'visibility': 'public'})
        mac_repo = self.gl.projects.create({'name': 'torbrowser-'+version+'-osx',
            'visibility': 'public'})
        linux_repo = self.gl.projects.create({'name': 'torbrowser-'+version+'-linux',
            'visibility': 'public'})

        self.repositories = {
            "linux32" : linux_repo,
            "linux64" : linux_repo,
            "win32" : windows_repo,
            "win64" : windows_repo,
            "osx64" : mac_repo
        }


    def upload(self, filename, arch):
        with open(filename, 'rb') as f:
            contents = f.read()
        data = {
            'branch': 'master',
            'commit_message': 'GetTor automated commit - update with new Tor Browser downloads',
            'actions': [
                {
                    # Binary files need to be base64 encoded
                    'action': 'create',
                    'file_path': filename,
                    'content': base64.b64encode(contents).decode("ascii"),
                    'encoding': 'base64',
                }
            ]
        }

        self.repositories[arch].commits.create(data)

class GithubRemote:
    def __init__(self, token):
        g = Github(token)
        self.repo = g.get_repo(REPO_NAME)

    def delete_old_releases(self):
        for release in self.repo.get_releases():
            for asset in release.get_assets():
                asset.delete_asset()
            release.delete_release()

    def create_release(self):
        self.release = self.repo.create_git_release("torbrowser-release", "Tor Browser releases", "These releases were uploaded to be distributed with gettor.")

    def upload(self, filename, arch):
        self.release.upload_asset(filename)

#Download list of tor browser releases and upload them to remote repositories
def upload_files(remotes):
    if len(remotes) == 0:
        print("Error: No remotes to update", file=sys.stderr)
        return 1

    for arch in data['downloads']:
        for locale in data['downloads'][arch]:
            for asset in data['downloads'][arch][locale]:
                url = data['downloads'][arch][locale][asset]
                filename = url.split('/')[-1]
                try:
                    subprocess.check_call(["/usr/bin/wget", "--quiet", url])

                except:
                    print("Error: failed to fetch "+url+". Will retry later.",
                            file=sys.stderr)
                    failed_uploads.append(url)
                    continue

                for remote in remotes:
                    remote.upload(filename, arch)
                os.remove(filename)
    
    failure = False

    #Retry failed uploads
    for url in failed_uploads:
        filename = url.split('/')[-1]
        try:
            subprocess.check_call(["/usr/bin/wget", "--quiet", url])
            for remote in remotes:
                remote.upload(filename, arch)
            os.remove(filename)
        except:
            print("Error: failed to update "+url+". Please upload this file manually.",
                    file=sys.stderr)
            failure = True

    if failure:
        return 1


def main():
    global version
    global data

    url = urllib.request.urlopen("https://aus1.torproject.org/torbrowser/update_3/release/downloads.json")
    data = json.loads(url.read().decode())
    version = data["version"]

    remotes = []
    if 'GITHUB_AUTH' not in os.environ:
        print("WARNING: No Github authentication token given", file=sys.stderr)
        print("The authentication token for github should be placed in the environment"
                "variable 'GITHUB_AUTH'", file=sys.stderr)
    else:
        github = GithubRemote(os.environ['GITHUB_AUTH'])
        github.delete_old_releases()
        github.create_release()
        remotes.append(github)

    if 'GITLAB_AUTH' not in os.environ:
        print("WARNING: No GitLab authenticatin token given", file=sys.stderr)
        print("The authentication token for gitlab should be placed in the environment"
                "variable 'GITLAB_AUTH'", file=sys.stderr)
    else:
        gitlab = GitlabRemote(os.environ['GITLAB_AUTH'])
        gitlab.delete_old_projects()
        gitlab.create_projects()
        remotes.append(gitlab)

    return upload_files(remotes)

if __name__ == "__main__":
    sys.exit(main())
